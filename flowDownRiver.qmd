---
title: "Visualizations of River Discharge flowing downstream"
---

```{R}

# eastward flow out of Okeechobee
stations <- c(
  "S-308",
  "S-80"
)

# westward flow out of Okeechobee
stations <- c(
  "S-354",
  "S-79"
)

# southeastern flow out of Okeechobee
stations <- c(
  "HillsCan"
)

# south flow out of Okeechobee
stations <- c(
  "S-351",
  "S-12"
)

# SW flow out of Everglades
stations <- c(
  "BotCr",
  "Flam"
)

# lake outflow total
stations <- c(
  "S-351",
  "S-354",
  "S-308",
  "LV8",
  "HillsCan"
)

param_name <- "Disch"

source("R/getData.R")

# Create an empty data frame to hold all data
all_data <- data.frame()

# Loop through stations and get data for each
for (station_shortname in stations) {
  # Get the data for the current station using the parameter name
  df <- getData(station_shortname, param_name)

  # Calculate a moving average
  library(zoo)
  df$moving_avg <- rollmean(df$value, k = 90, fill = NA, align = "right")

  # Add a column to identify the station
  df$station <- station_shortname

  # Append the current station's data to the combined data frame
  all_data <- rbind(all_data, df)
}

# Create a unified time series plot
library(ggplot2)
p <- ggplot(all_data, aes(x = datetime, y = value, color = station)) +
  # geom_point(shape = 4, alpha = 0.1) +  # Transparent points
  geom_line(aes(y = moving_avg)) +      # Moving average lines
  labs(
    title = "Combined Time Series Plot",
    x = "Datetime",
    y = "Value",
    color = "Station"
  ) +
  theme_minimal()

# Print the plot
print(p)
```

```{R}
#| eval: false
# Install and load required packages
if (!requireNamespace("ggstream", quietly = TRUE)) {
  install.packages("ggstream")
}
if (!requireNamespace("tidyr", quietly = TRUE)) {
  install.packages("tidyr")
}
library(ggstream)
library(dplyr)
library(tidyr)
library(ggplot2)

# Combine all data into one dataframe
all_data <- data.frame()

for (station_shortname in stations) {
  # Get the data for the current station using the parameter name
  df <- getData(station_shortname, param_name)
  
  # Standardize datetime column to Date format
  df$datetime <- as.Date(df$datetime)
  
  # Add a station identifier
  df$station <- station_shortname
  
  # Append to the main dataframe
  all_data <- rbind(all_data, df)
}

# # === drop any days that are missing a value at any station
# df_wide <- pivot_wider(all_data, names_from = station, values_from = value)
# df_clean <- na.omit(df_wide)
# df_long <- df_clean %>%
#   select(-`_cd`) %>% # Drop the `_cd` column
#   pivot_longer(
#     cols = c(`S-351`, `S-354`, `S-308`, LV8, HillsCan), # Columns to pivot
#     names_to = "station", # New column for station names
#     values_to = "value"   # New column for values
#   )

# === Summarize and ensure completeness
all_data_summary <- df_long %>%
  group_by(datetime, station) %>%
  summarize(value = mean(value, na.rm = TRUE), .groups = "drop") %>%
  complete(datetime = seq.Date(min(datetime), max(datetime), by = "day"),
           station,
           fill = list(value = 0)) %>%
  arrange(datetime, station)
# 
# Verify the data
# print(head(all_data_summary))  # Ensure all datetime and station combinations exist
# 
# all_data_summary$days_since_epoch <- as.numeric(all_data_summary$datetime - as.Date("1970-01-01"))

# bug workaround see https://github.com/davidsjoberg/ggstream/issues/16
n_grid <- length(all_data_summary$datetime)+0.2*length(all_data_summary$datetime)

# Create the streamgraph
p <- ggplot(all_data_summary, aes(x = datetime, y = value, fill = station)) +
  geom_stream(type = "ridge", n_grid = n_grid) +
  labs(
    title = "Streamgraph of Values Over Time",
    x = "Datetime",
    y = "Value",
    fill = "Station"
  ) +
  theme_minimal()

# Print the plot
print(p)

```
