[
  {
    "objectID": "flowDownRiver.html",
    "href": "flowDownRiver.html",
    "title": "Visualizations of River Discharge flowing downstream",
    "section": "",
    "text": "# eastward flow out of Okeechobee\nstations &lt;- c(\n  \"S-308\",\n  \"S-80\"\n)\n\n# westward flow out of Okeechobee\nstations &lt;- c(\n  \"S-354\",\n  \"S-79\"\n)\n\n# southeastern flow out of Okeechobee\nstations &lt;- c(\n  \"HillsCan\"\n)\n\n# south flow out of Okeechobee\nstations &lt;- c(\n  \"S-351\",\n  \"S-12\"\n)\n\n# SW flow out of Everglades\nstations &lt;- c(\n  \"BotCr\",\n  \"Flam\"\n)\n\n# lake outflow total\nstations &lt;- c(\n  \"S-351\",\n  \"S-354\",\n  \"S-308\",\n  \"LV8\",\n  \"HillsCan\"\n)\n\nparam_name &lt;- \"Disch\"\n\nsource(\"R/getData.R\")\n\n# Create an empty data frame to hold all data\nall_data &lt;- data.frame()\n\n# Loop through stations and get data for each\nfor (station_shortname in stations) {\n  # Get the data for the current station using the parameter name\n  df &lt;- getData(station_shortname, param_name)\n\n  # Calculate a moving average\n  library(zoo)\n  df$moving_avg &lt;- rollmean(df$value, k = 90, fill = NA, align = \"right\")\n\n  # Add a column to identify the station\n  df$station &lt;- station_shortname\n\n  # Append the current station's data to the combined data frame\n  all_data &lt;- rbind(all_data, df)\n}\n\n[1] \"using cached data\"\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\n[1] \"using cached data\"\n[1] \"using cached data\"\n[1] \"using cached data\"\n[1] \"using cached data\"\n\n# Create a unified time series plot\nlibrary(ggplot2)\np &lt;- ggplot(all_data, aes(x = datetime, y = value, color = station)) +\n  # geom_point(shape = 4, alpha = 0.1) +  # Transparent points\n  geom_line(aes(y = moving_avg)) +      # Moving average lines\n  labs(\n    title = \"Combined Time Series Plot\",\n    x = \"Datetime\",\n    y = \"Value\",\n    color = \"Station\"\n  ) +\n  theme_minimal()\n\n# Print the plot\nprint(p)\n\nWarning: Removed 445 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\n\n# Install and load required packages\nif (!requireNamespace(\"ggstream\", quietly = TRUE)) {\n  install.packages(\"ggstream\")\n}\nif (!requireNamespace(\"tidyr\", quietly = TRUE)) {\n  install.packages(\"tidyr\")\n}\nlibrary(ggstream)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\n\n# Combine all data into one dataframe\nall_data &lt;- data.frame()\n\nfor (station_shortname in stations) {\n  # Get the data for the current station using the parameter name\n  df &lt;- getData(station_shortname, param_name)\n  \n  # Standardize datetime column to Date format\n  df$datetime &lt;- as.Date(df$datetime)\n  \n  # Add a station identifier\n  df$station &lt;- station_shortname\n  \n  # Append to the main dataframe\n  all_data &lt;- rbind(all_data, df)\n}\n\n# # === drop any days that are missing a value at any station\n# df_wide &lt;- pivot_wider(all_data, names_from = station, values_from = value)\n# df_clean &lt;- na.omit(df_wide)\n# df_long &lt;- df_clean %&gt;%\n#   select(-`_cd`) %&gt;% # Drop the `_cd` column\n#   pivot_longer(\n#     cols = c(`S-351`, `S-354`, `S-308`, LV8, HillsCan), # Columns to pivot\n#     names_to = \"station\", # New column for station names\n#     values_to = \"value\"   # New column for values\n#   )\n\n# === Summarize and ensure completeness\nall_data_summary &lt;- df_long %&gt;%\n  group_by(datetime, station) %&gt;%\n  summarize(value = mean(value, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  complete(datetime = seq.Date(min(datetime), max(datetime), by = \"day\"),\n           station,\n           fill = list(value = 0)) %&gt;%\n  arrange(datetime, station)\n# \n# Verify the data\n# print(head(all_data_summary))  # Ensure all datetime and station combinations exist\n# \n# all_data_summary$days_since_epoch &lt;- as.numeric(all_data_summary$datetime - as.Date(\"1970-01-01\"))\n\n# bug workaround see https://github.com/davidsjoberg/ggstream/issues/16\nn_grid &lt;- length(all_data_summary$datetime)+0.2*length(all_data_summary$datetime)\n\n# Create the streamgraph\np &lt;- ggplot(all_data_summary, aes(x = datetime, y = value, fill = station)) +\n  geom_stream(type = \"ridge\", n_grid = n_grid) +\n  labs(\n    title = \"Streamgraph of Values Over Time\",\n    x = \"Datetime\",\n    y = \"Value\",\n    fill = \"Station\"\n  ) +\n  theme_minimal()\n\n# Print the plot\nprint(p)"
  },
  {
    "objectID": "map.html",
    "href": "map.html",
    "title": "Interactive Station Map",
    "section": "",
    "text": "Map of stations.\n\n# Load required libraries\nlibrary(leaflet)\n\n# Load the data\ndata &lt;- read.csv(\"data/SouthFL_USGS_ACE_SiteList.csv\")\n\nleaflet(data) %&gt;%\n  addProviderTiles(providers$USGS.USTopo) %&gt;%\n  addCircleMarkers(\n    ~Lon, ~Lat,\n    label = ~Station_shortname,  # Hover labels\n    radius = 5,                 # Adjust the size of the circle markers\n    color = \"black\",             # Marker border color\n    fillColor = \"blue\",    # Marker fill color\n    fillOpacity = 0.7,          # Opacity of the fill color\n    popup = ~paste(\"&lt;b&gt;Station:&lt;/b&gt;\", Station_shortname)\n  )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "fkwq-usgs-river-gauges",
    "section": "",
    "text": "Water discharge monitoring reports by IMaRS built using quarto."
  },
  {
    "objectID": "stationInspect.html",
    "href": "stationInspect.html",
    "title": "Inspect Data for Given Station",
    "section": "",
    "text": "station_shortname &lt;- params$station_shortname\n\nsource(\"R/getData.R\")\ndf &lt;- getData(station_shortname, \"Disch\")\n\n[1] \"using cached data\"\n\n\n\n# Calculate a moving average\nlibrary(zoo)\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\nk &lt;- 30\ndf$moving_avg &lt;- rollmean(df$value, k = k, fill = NA, align = \"center\")\n\n# Create the time series plot\nlibrary(ggplot2)\nlibrary(glue)\nggplot(df, aes(x = datetime, y = value)) +\n  geom_point(shape = 4, color = \"black\", alpha = 0.1) +  # Transparent blue \"x\"\n  geom_line(aes(y = moving_avg), color = \"blue\", size = 1) +  # Moving average line\n  labs(\n    title = glue(\"{station_shortname} Discharge with {k}d MA\"),\n    x = \"Datetime\",\n    y = \"Value\"\n  ) +\n  theme_minimal()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nâ„¹ Please use `linewidth` instead.\n\n\nWarning: Removed 29 rows containing missing values or values outside the scale range\n(`geom_line()`)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "data-download.html",
    "href": "data-download.html",
    "title": "fkwq-usgs-river-gauges",
    "section": "",
    "text": "library(glue)\nlibrary(httr)\n\n# Read the input CSV file\nsites &lt;- read.csv(\"data/SouthFL_USGS_ACE_SiteList.csv\")\n\n# Specify the base URL\nbase_url &lt;- \"https://waterdata.usgs.gov/nwis/dv?cb_{param_code}=on&format=rdb&site_no={sta_ID}&referred_module=sw&period=&begin_date=01-01-1950&end_date=12-31-2024\"\n\n# Create a directory to save the downloaded files\noutput_dir &lt;- \"data/downloads\"\ndir.create(output_dir, showWarnings = FALSE)\n\n# Loop through each row of the dataframe\nfor (i in seq_len(nrow(sites))) {\n  # Extract parameters from the current row\n  sta_ID &lt;- sites$USGS_ID[i] # Replace with the actual column name\n  param_code &lt;- sites$parameter2[i] # Replace with the actual column name\n  \n  # Construct the URL with parameters\n  query_params &lt;- list(param1 = param1, param2 = param2)\n  url &lt;- modify_url(base_url, query = query_params)\n  \n  # Construct the output file name\n  output_file &lt;- file.path(output_dir, paste0(\"file_\", i, \".csv\"))\n  \n  # Download the file and save it locally\n  tryCatch({\n    GET(url, write_disk(output_file, overwrite = TRUE))\n    message(\"Downloaded: \", output_file)\n  }, error = function(e) {\n    warning(\"Failed to download for row \", i, \": \", conditionMessage(e))\n  })\n}\n\nmessage(\"All downloads completed.\")"
  }
]